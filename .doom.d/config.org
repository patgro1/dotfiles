#+TITLE: pgrogan Emacs Configuration
* Base Configuration
** Personal Information
Basic user information
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq user-full-name "Patrick Grogan"
      user-mail-address "pgrogan@gmail.com")
#+END_SRC
** Font and Size
*** Font face
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Fira Code" :size 18))
(unless (find-font doom-font)
    (setq doom-font (font-spec :family "Inconsolata" :size 18)))
#+END_SRC
*** Unicode Font
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq doom-unicode-font (font-spec :name "DejaVu Sans Mono" :size 20))
#+END_SRC
** Whitespace management
Some of these settings are the doom's default but I just want to make sure
#+BEGIN_SRC emacs-lisp :tangle config.el
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq-default standard-indent 4)
    (setq-default tab-stop-list (number-sequence 4 120 4))
#+END_SRC
Also make sure we strip all whitespaces on save
#+BEGIN_SRC emacs-lisp :tangle config.el
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Line numbers
I really like to have both absolute and relative line numbers.
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq display-line-numbers-type 'relative)
#+END_SRC
* Custom functions
** Display ansi colors in file
Some time, due to log checking, it happens I want to display the ansi color
instead of only code. This function helps me with that.
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! ansi-color)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle config.el
(after! ansi-color
  (defun display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC
* Projectile Configuration
1- Set the indexing method to alien
2- Set the search path to ~/workspace
3- Defining a custom switching function that workd with lsp
4- Hook that function to projectile project switch
#+BEGIN_SRC emacs-lisp :tangle config.el
(after! projectile
  (setq projectile-indexing-mode 'alien
        projectile-project-search-path '("~/workspace"))
  (defun setup_env ()
    (interactive )
    (venv-deactivate)
    (setenv "TOOLS_PATH" (concat (projectile-project-root) "/tools"))
    (setenv "PYTHONPATH" (concat (projectile-project-root) ":" (getenv "TOOLS_PATH") "/cocotb:" (getenv "TOOLS_PATH") "/themis_fw:"))
    (message (concat "working on" (projectile-project-root) "/virtualenvs"))
    (venv-set-location (concat (projectile-project-root) "virtualenvs"))
    (venv-workon )
    (lsp)
    (setq projectile-tags-command (concat (projectile-project-root)"scripts/etags/verilog_etags " (projectile-project-root) "rtl"))
    (setq projectile-tags-file-name (concat (projectile-project-root) "rtl/TAGS")))
  (setq projectile-after-switch-project-hook #'setup_env))

#+END_SRC

* LSP Configuration
We configure the LSP mode here. Make sure we use Microsoft Language server for
python.
#+BEGIN_SRC emacs-lisp :tangle packages.el
;FIXME: For some reason, I am unable to use lsp-python-ms
;(package! lsp-python-ms)
;#+END_SRC
;#+BEGIN_SRC emacs-lisp :tangle config.el
;(use-package! lsp-python-ms
;  :hook (python-mode . (lambda ()
;                       (require 'lsp-python-ms)
;                       (lsp))))

#+END_SRC

* Magit Configuration
* Additional packages
** Graphviz dot mode
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! graphviz-dot-mode)
#+END_SRC
** Virtualenvwrapper
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! virtualenvwrapper)
#+END_SRC
** Jinja2
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! jinja2-mode)
#+END_SRC
** Verilog Mode
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! verilog-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle config.el
(after! verilog-mode
  (setq verilog-auto-newline nil
        verilog-case-indent 4
        verilog-cexp-indent 4
        verilog-highlight-grouping-keyword t
        verilog-highlight-modules nil
        verilog-indent-level 4
        verilog-indent-level-behavioral 4
        verilog-indent-level-declaration 4
        verilog-indent-level-module 4
        verilog-auto-lineup 'assignment)
  ; Load verilog mode only when needed
  (autoload 'verilog-mode "verilog-mode" "Verilog mode" t)
  ; Any files that ends in .v, .dv or .sv should be in verilog mode
  (add-to-list 'auto-mode-alist '("\\.[ds]?vh?\\'" . verilog-mode))
  ; Any files in verilog mode should have their keywords colorized
  (add-hook 'verilog-mode-hook '(lambda () (font-lock-mode 1))))
#+END_SRC
** Vue mode
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! vue-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle config.el
(after! vue-mode
  (add-hook 'vue-mode-hook #'lsp))
#+END_SRC
