#!/bin/sh
#
# external_rules_command
#
# Absolute path to the command used to retrieve rule consequences.
# The command will receive the following arguments: window ID, class
# name, instance name, and intermediate consequences. The output of
# that command must have the following format: key1=value1
# key2=value2 ...  (the valid key/value pairs are given in the
# description of the rule command).
#
#
# Rule
#    General Syntax
# 	   rule COMMANDS
#
#    Commands
# 	   -a, --add (<class_name>|*)[:(<instance_name>|*)] [-o|--one-shot]
# 	   [monitor=MONITOR_SEL|desktop=DESKTOP_SEL|node=NODE_SEL]
# 	   [state=STATE] [layer=LAYER] [split_dir=DIR] [split_ratio=RATIO]
# 	   [(hidden|sticky|private|locked|marked|center|follow|manage|focus|border)=(on|off)]
# 	   [rectangle=WxH+X+Y]
# 		   Create a new rule.
#
# 	   -r, --remove
# 	   ^<n>|head|tail|(<class_name>|*)[:(<instance_name>|*)]...
# 		   Remove the given rules.
#
# 	   -l, --list
# 		   List the rules.

class=$2
id=${1?}
instance=$3
consequences=$4

emacs() {
	echo state=tiled;
}

discord() {
	echo desktop=0;
}

firefox() {
	desktop=^2;
}

slack() {
	echo desktop=0;
}

spotify() {
	echo desktop=0;
}

vivado() {
	echo state=floating;
}

zoom {
    echo desktop=0
}

xmessage() {
	state=floating;
	layer=normal;
}

case $instance.$class in
	(*.Emacs) emacs;;
	(*.[Ff]irefox) firefox;;
	(*.Slack) slack;;
	(*.Spotify) spotify;;
	(*.Vivado) vivado;;
	(*.Xmessage) xmessage;;
	(*.Discord) discord;;
	(*.zoom) zoom;;
	(.)
		case $(ps -p "$(xdo pid "$id")" -o comm= 2>/dev/null) in
			(spotify) spotify;;
		esac;;
esac;
