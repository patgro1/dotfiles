#+TITLE: pgrogan Emacs Configuration

* Emacs Configuration

** Base configuration

*** Remove unuseful menus and splash
#+BEGIN_SRC emacs-lisp
    (setq inhibit-splash-screen t) ; disable splash screenemacs
    (tool-bar-mode -1) ; No toolbar
    (menu-bar-mode -1) ; No menu bar
#+END_SRC

*** Remove weird backup files created
#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t   ; Don't delink hardlinks
	version-control t     ; Use version number on backups
	delete-old-versions t ; Automatically delete excess backups
	kept-new-versions 20  ; Keep up to 20 new versions of a file
	kept-old-versions 5   ; Keep 5 version of the old
    )
#+END_SRC

*** Tabs and whitespace settings
We want to make sure that all tabs are spaces and that the tab width is set to
4 spaces. Also, let's make sure that one save, we trim excess white space from the line.
#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq-default standard-indent 4)
    (setq-default tab-stop-list (number-sequence 4 120 4))

    ; Remove excess space on save
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Font and size
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :font "Inconsolata-16")
#+END_SRC
*** Add column numbers and highlight current line
#+BEGIN_SRC emacs-lisp
    (column-number-mode 1)
    (global-hl-line-mode)
#+END_SRC
** Evil Mode
Since VIM probably got the best bindings for editing text, lets use
evil mode.
#+BEGIN_SRC emacs-lisp
(use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (use-package evil-leader
        :ensure t
        :config
        (global-evil-leader-mode)
        (evil-leader/set-leader "SPC")
        (evil-leader/set-key
            "e" 'find-file
            "b" 'switch-to-buffer
            "q" 'kill-buffer
            "n" 'next-buffer
            "p" 'previous-buffer)
    )
    (use-package evil-lion
        :ensure t
        :config
        (evil-lion-mode)
    )
)
#+END_SRC
** Packages
*** General
#+BEGIN_SRC emacs-lisp
    (use-package view :ensure t)
    (use-package popwin :ensure t)
    (use-package multi-term :ensure t)
#+END_SRC
*** Colorscheme
#+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
        :ensure t
        :config
        (set-face-foreground 'font-lock-comment-face "grey68")
    )
    (use-package kaolin-themes
        :ensure t
        :config
        (load-theme 'kaolin-bubblegum t)
        (set-face-foreground 'font-lock-comment-face "grey48")
        (set-face-foreground 'font-lock-comment-delimiter-face "grey34"))
#+END_SRC
*** Linum
#+BEGIN_SRC emacs-lisp
    (use-package linum-relative
        :ensure t
        :config
        (linum-relative-global-mode)
        (setq linum-relative-current-symbol "")
        (set-face-foreground 'linum "grey68")
        (set-face-attribute 'linum nil :height 150)
    )
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
    (use-package magit
        :ensure t
        :config
        (evil-leader/set-key
            "gs" 'magit-status))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
        :ensure t
        :config
	(projectile-mode +1)
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        (setq-default projectile-indexing-mode 'alien)
        (projectile-global-mode))
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
    (use-package company
        :ensure t
        :config
        (global-company-mode t))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
        :ensure t
        :init (global-flycheck-mode)
        :config
            (use-package flycheck-pos-tip
                :ensure t
                :init (flycheck-pos-tip-mode)))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
        :ensure t
        :config
        (add-hook 'python-mode-hook #'lsp)
        (use-package lsp-ui :ensure t :commands lsp-ui-mode)
        (use-package company-lsp :ensure t :commands company-lsp)
        (setq lsp-enable-snippet nil))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
    (use-package markdown-preview-mode
        :ensure t)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
    (use-package company-jedi
        :ensure t
        :config
        (add-to-list 'company-backends 'company-jedi)
        (setq jedi:complete-on-dot t)
        :hook
            (inferior-python-mode . jedi:setup)
            (python-mode . jedi:setup))
#+END_SRC

*** Verilog/SystemVerilog
#+BEGIN_SRC emacs-lisp
    (use-package verilog-mode
        :ensure t
        :config
            (setq verilog-auto-newline nil)
            (setq verilog-case-indent 4)
            (setq verilog-cexp-indent 4)
            (setq verilog-highlight-grouping-keywords t)
            (setq verilog-highlight-modules nil)
            (setq verilog-indent-level 4)
            (setq verilog-indent-level-behavioral 4)
            (setq verilog-indent-level-declaration 4)
            (setq verilog-indent-level-directive 4)
            (setq verilog-indent-level-module 4)
            (setq verilog-auto-lineup 'assignment)
            ;; Load verilog mode only when needed
            (autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
            ;; Any files that end in .v, .dv or .sv should be in verilog mode
            (add-to-list 'auto-mode-alist '("\\.[ds]?vh?\\'" . verilog-mode))
            ;; Any files in verilog mode should have their keywords colorized
            (add-hook 'verilog-mode-hook '(lambda () (font-lock-mode 1)))
    )
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
        :ensure t
        :mode ("\\.yml$" . yaml-mode))
#+END_SRC
:
