#+TITLE: pgrogan Emacs Configuration

* Emacs Configuration

** Base configuration

*** Remove unuseful menus and splash
#+BEGIN_SRC emacs-lisp
    (setq inhibit-splash-screen t) ; disable splash screenemacs
    (tool-bar-mode -1) ; No toolbar
    (menu-bar-mode -1) ; No menu bar
#+END_SRC

*** Remove weird backup files created
#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t   ; Don't delink hardlinks
	version-control t     ; Use version number on backups
	delete-old-versions t ; Automatically delete excess backups
	kept-new-versions 20  ; Keep up to 20 new versions of a file
	kept-old-versions 5   ; Keep 5 version of the old
    )
#+END_SRC

*** Tabs and whitespace settings
We want to make sure that all tabs are spaces and that the tab width is set to
4 spaces. Also, let's make sure that one save, we trim excess white space from the line.
#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq-default standard-indent 4)
    (setq-default tab-stop-list (number-sequence 4 120 4))

    ; Remove excess space on save
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Font and size
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :font "Inconsolata-16")
#+END_SRC
*** Add column numbers and highlight current line
#+BEGIN_SRC emacs-lisp
    (column-number-mode 1)
    (global-hl-line-mode)
#+END_SRC
*** Function to open this file
I like to have an easy way to open my config file.
#+BEGIN_SRC emacs-lisp
(defun open-config-file ()
    (interactive)
    (find-file (concat user-emacs-directory "conf.org")))
(global-set-key (kbd "C-c c") 'open-config-file)
#+END_SRC
*** Highlight todo and such
#+BEGIN_SRC emacs-lisp
(defface fix-me-comment '((t (:foreground "#ff0000"))) "Red")
(font-lock-add-keywords
    'prog-mode '(("// FIXME" 0 'fix-me-comment t)))

#+END_SRC
** Evil Mode
Since VIM probably got the best bindings for editing text, lets use
evil mode.
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'cl)) ;; lexical-let
(use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (use-package evil-leader
        :ensure t
        :config
        (global-evil-leader-mode)
        (evil-leader/set-leader "SPC")
        (evil-leader/set-key
            "b" 'switch-to-buffer
            "q" 'kill-buffer
            "n" 'next-buffer
            "p" 'previous-buffer)
    )
    (lexical-let ((default-color (cons (face-background 'mode-line)
                                    (face-foreground 'mode-line))))
                (add-hook 'post-command-hook (lambda ()
                    (let ((color (cond ((minibufferp) default-color)
                                    ((evil-insert-state-p) '("#006fa0" . "#ffffff"))
                                    ((evil-visual-state-p) '("#008800" . "#ffffff"))
                                    ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
                                    ((buffer-modified-p)   '("#e80000" . "#ffffff"))
                                    (t default-color))))
                        (set-face-background 'mode-line (car color))
                        (set-face-foreground 'mode-line (cdr color))))))
    (use-package evil-lion
        :ensure t
        :config
        (evil-lion-mode)
    )
    (use-package evil-nerd-commenter
        :ensure t
        :config
            (evilnc-default-hotkeys)
            (evil-leader/set-key
                "ci" 'evilnc-comment-or-uncomment-lines
                "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
                "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
                "cc" 'evilnc-copy-and-comment-lines
                "cp" 'evilnc-comment-or-uncomment-paragraphs
                "cr" 'comment-or-uncomment-region
                "cv" 'evilnc-toggle-invert-comment-line-by-line
                "."  'evilnc-copy-and-comment-operator))

    (define-key evil-normal-state-map (kbd "H") 'beginning-of-line-text)
    (define-key evil-normal-state-map (kbd "L") 'end-of-line)
)
#+END_SRC
** Packages
*** General
#+BEGIN_SRC emacs-lisp
    (use-package view :ensure t)
    (use-package popwin :ensure t)
    (use-package multi-term :ensure t)
#+END_SRC
*** Colorscheme
#+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
        :ensure t
        :config
        (set-face-foreground 'font-lock-comment-face "grey68")
    )
    (use-package doom-themes
        :ensure t
        :config
        (setq doom-themes-enable-bold t
              doom-themes-enable-italic t)
        (doom-themes-org-config))

    (use-package kaolin-themes
        :ensure t
        :config
        (set-face-foreground 'font-lock-comment-face "grey48")
        (set-face-foreground 'font-lock-comment-delimiter-face "grey34"))
    (use-package material-theme
        :ensure t)
    (load-theme 'doom-one t)
#+END_SRC
*** Ivy mode and things that goes with it
#+BEGIN_SRC emacs-lisp
    (use-package ivy
        :ensure t
        :config
            (ivy-mode 1)
            (setq ivy_use-virutal-buffers t)
            (setq ivy-count-format "(%d/%d) ")
            (setq ivy-re-builders-alist '(
                (t . ivy--regex-fuzzy)))
            (use-package counsel
                :ensure t
                :config
                    (counsel-mode)
                    (setq counsel-find-file-ignore-regexp
                            (concat
                            ;; File names beginning with # or .
                            "\\(?:\\`[#.]\\)"
                            ;; File names ending with # or ~
                            "\\|\\(?:\\`.+?[#~]\\'\\)"
                            "\\|\\.git"
                            "\\|virtualenv"
                            "\\|pycache"))
                    (evil-leader/set-key
                        "e" 'counsel-find-file
                        "f" 'counsel-file-jump)))

#+END_SRC
*** Linum
#+BEGIN_SRC emacs-lisp
    (use-package linum-relative
        :ensure t
        :config
        (linum-relative-global-mode)
        (setq linum-relative-current-symbol "")
        (set-face-foreground 'linum "grey68")
        (set-face-attribute 'linum nil :height 150)
    )
#+END_SRC

*** Highlight indentation
#+BEGIN_SRC emacs-lisp
    (use-package highlight-indent-guides
        :ensure t
        :config
            (setq highlight-indent-guides-method 'character
                  highlight-indent-guides-auto-odd-face-perc 30
                  highlight-indent-guides-auto-even-face-perc 35
                  highlight-indent-guides-auto-character-face-perc 25)
            (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC
*** Graphviz Dot Mode
#+BEGIN_SRC emacs_lisp
    (use-package graphviz-dot-mode
        :ensure t
    )
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
    (use-package magit
        :ensure t
        :config
        (evil-leader/set-key
            "gs" 'magit-status))
#+END_SRC
*** Virtualenvwrapper
#+BEGIN_SRC emacs-lisp
    (use-package virtualenvwrapper
        :ensure t)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
        :ensure t
        :config
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        (evil-leader/set-key
            "gf" 'projectile--find-file
            "sp" 'projectile-switch-project
            "so" 'projectile-switch-open-project)
        (setq projectile-globally-ignored-directories
            (quote
                (".idea" ".ensime_cache" ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_"
                ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "./testplans/*/covhtmlreport" ".hdl_checker")))
        (setq projectile-globally-ignored-files
            (quote
                ("TAGS" "tags" "transcript" "*.log" "*.qtl" "*.qpg" "_info" "*.wlf" "*.qdb")))
        (setq projectile-globally-unignored-directories nil)
        (setq projectile-indexing-mode 'alien)
        (setq frame-title-format
            '(""
              "%b"
              (:eval
               (let ((project-name (projectile-project-name)))
                 (unless (string= "-" project-name)
                   (format " in [%s]" project-name))))))
        (projectile-mode)
        (projectile-global-mode)
        (defun setup_env ()
            (interactive )
            (venv-deactivate)
            (setenv "TOOLS_PATH" (concat (projectile-project-root) "/tools"))
            (setenv "PYTHONPATH" (concat (projectile-project-root) ":" (getenv "TOOLS_PATH") "/cocotb:" (getenv "TOOLS_PATH") "/themis_fw:"))
            (message (concat "working on" (projectile-project-root) "/virtualenvs"))
            (venv-set-location (concat (projectile-project-root) "virtualenvs"))
            (venv-workon )
            (lsp-restart-workspace)
            (setq projectile-tags-command (concat (projectile-project-root)"scripts/etags/verilog_etags " (projectile-project-root) "rtl"))
            (setq projectile-tags-file-name (concat (projectile-project-root) "rtl/TAGS"))
        )
        (setq projectile-after-switch-project-hook #'setup_env))
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
    (use-package company
        :ensure t
        :config
        (global-company-mode t))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
        :ensure t
        :init (global-flycheck-mode)
        :config
            (use-package flycheck-pos-tip
                :ensure t
                :init (flycheck-pos-tip-mode)))
#+END_SRC
*** Jinja2
This major mode is used to edit all sort of templates including jinja2
#+BEGIN_SRC emacs-lisp
    (use-package jinja2-mode
        :ensure t)
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
        :ensure t
        :config
        (add-hook 'latex-mode-hook #'lsp)
        ; (add-hook 'vhdl-mode-hook #'lsp)
        ; (add-hook 'verilog-mode-hook #'lsp)
        ;(add-hook 'prog-mode-hook #'lsp)
        (use-package lsp-clients
            :config
                (when (equal system-type 'darwin)
                    (setq lsp-clients-clangd-executable "/usr/local/opt/llvm/bin/clangd"))
                (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=info" "-pretty")))
        (use-package lsp-ui
            :ensure t
            :config
                (setq lsp-ui-flycheck-enable t)
                (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
                (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
            :commands lsp-ui-mode)
        (use-package company-lsp :ensure t :commands company-lsp)
        ; C++ LSP registration and activation
        (add-hook 'c++-mode-hook 'lsp)
        (use-package lsp-python-ms
            :ensure t
            :hook (python-mode . (lambda ()
                                 (require 'lsp-python-ms)
                                 (lsp))))
        (setq lsp-enable-snippet nil))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
    (use-package markdown-preview-mode
        :ensure t)
#+END_SRC
*** Rainbow delimiter
#+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
        :ensure t
        :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
    (use-package company-jedi
        :ensure t
        :config
        (add-to-list 'company-backends 'company-jedi)
        (setq jedi:complete-on-dot t)
        :hook
            (inferior-python-mode . jedi:setup)
            (python-mode . jedi:setup))
#+END_SRC

*** Verilog/SystemVerilog
#+BEGIN_SRC emacs-lisp
    (use-package verilog-mode
        :ensure t
        :config
            (setq verilog-auto-newline nil)
            (setq verilog-case-indent 4)
            (setq verilog-cexp-indent 4)
            (setq verilog-highlight-grouping-keywords t)
            (setq verilog-highlight-modules nil)
            (setq verilog-indent-level 4)
            (setq verilog-indent-level-behavioral 4)
            (setq verilog-indent-level-declaration 4)
            (setq verilog-indent-level-directive 4)
            (setq verilog-indent-level-module 4)
            (setq verilog-auto-lineup 'assignment)
            ;; Load verilog mode only when needed
            (autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
            ;; Any files that end in .v, .dv or .sv should be in verilog mode
            (add-to-list 'auto-mode-alist '("\\.[ds]?vh?\\'" . verilog-mode))
            ;; Any files in verilog mode should have their keywords colorized
            (add-hook 'verilog-mode-hook '(lambda () (font-lock-mode 1)))
    )
#+END_SRC
#+END_SRC
*** Vue mode
#+BEGIN_SRC emacs-lisp
    (use-package vue-mode
        :ensure t
        :mode "\\.vue\\'"
        :config
            (add-hook 'vue-mode-hook #'lsp))
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
        :ensure t
        :mode ("\\.yml$" . yaml-mode)
        :config
            (setq yaml-indent-offset 4))
#+END_SRC
:
